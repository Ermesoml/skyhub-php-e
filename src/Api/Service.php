<?php
/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  ${MAGENTO_MODULE_NAMESPACE}
 * @package   ${MAGENTO_MODULE_NAMESPACE}_${MAGENTO_MODULE}
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 */

namespace SkyHub\Api;

use GuzzleHttp\Client as HttpClient;

class Service implements ServiceInterface
{
    
    /** @var HttpClient */
    protected $_client = null;
    
    /** @var self */
    private static $_instance = null;
    
    
    /**
     * A protected constructor prevents that a any instance is created outside this class by using the `new` operator.
     */
    protected function __construct()
    {
    }
    
    
    /**
     * A private __clone method prevents this class to be cloned by any other class.
     *
     * @return void
     */
    private function __clone()
    {
    }
    
    
    /**
     * A private __wakeup method prevents this object to be unserialized.
     *
     * @return void
     */
    private function __wakeup()
    {
    }
    
    
    /**
     * @param string $email
     * @param string $apiKey
     * @param string $token
     *
     * @return $this
     */
    public function init($baseUri, array $headers = [], array $options = [])
    {
        $defaults = [
            'headers' => $headers,
        ];
        
        foreach ($options as $key => $value) {
            $defaults[$key] = $value;
        }
        
        $this->getHttpClient($baseUri, $defaults);
        
        return $this;
    }
    
    
    /**
     * @return Service
     */
    public static function getInstance()
    {
        if (null === self::$_instance) {
            self::$_instance = new self();
        }
        
        return self::$_instance;
    }
    
    
    /**
     * @return bool
     */
    public function checkService()
    {
        /**
         * @todo Create the logic to verify if the connection is working.
         */
        return true;
    }
    
    
    /**
     * @param null|string $uri
     * @param array|null  $options
     *
     * @return HttpClient
     */
    protected function getHttpClient($baseUri = null, array $defaults = [])
    {
        if (null === $this->_client) {
            $this->_client = new HttpClient([
                'base_uri' => $baseUri,
                'base_url' => $baseUri,
                'defaults' => $defaults
            ]);
        }
        
        return $this->_client;
    }
    
}
