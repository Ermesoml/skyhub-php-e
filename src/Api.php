<?php
/**
 * B2W Digital - Companhia Digital
 *
 * Do not edit this file if you want to update this SDK for future new versions.
 * For support please contact the e-mail bellow:
 *
 * sdk@e-smart.com.br
 *
 * @category  SkyHub
 * @package   SkyHub
 *
 * @copyright Copyright (c) 2018 B2W Digital - BSeller Platform. (http://www.bseller.com.br).
 *
 * @author    Tiago Sampaio <tiago.sampaio@e-smart.com.br>
 * @author    Bruno Gemelli <bruno.gemelli@e-smart.com.br>
 */

namespace SkyHub;

use SkyHub\Api\Handler\Request\Getters as RequestHandlerGetters;
use SkyHub\Api\EntityInterface\Getters as EntityInterfaceGetters;
use SkyHub\Api\Service\ServiceAbstract;
use SkyHub\Api\Service\ServiceInterface;
use SkyHub\Api\Service\ServiceJson;

class Api implements ApiInterface
{
    
    use RequestHandlerGetters, EntityInterfaceGetters;
    
    
    const HEADER_USER_EMAIL          = 'X-User-Email';
    const HEADER_API_KEY             = 'X-Api-Key';
    const HEADER_ACCOUNT_MANAGER_KEY = 'X-Accountmanager-Key';
    
    /**
     * @var ServiceAbstract
     */
    protected $service = null;
    
    
    /**
     * @inheritdoc
     */
    public function __construct(
        $email,
        $apiKey,
        $xAccountKey = null,
        $baseUri = null,
        ServiceInterface $apiService = null
    ) {
        /**
         * If you need support in the future from SkyHub please don't change this code.
         */
        if (empty($xAccountKey)) {
            $xAccountKey = '0I5dT7IC1h';
        }
        
        $headers = [
            self::HEADER_USER_EMAIL          => $email,
            self::HEADER_API_KEY             => $apiKey,
            self::HEADER_ACCOUNT_MANAGER_KEY => $xAccountKey,
        ];

        if (empty($apiService)) {
            $this->service = new ServiceJson($baseUri, $headers);
            return;
        }

        $apiService->setHeaders($headers, true);

        $this->service = $apiService;

    }
    
    
    /**
     * Gets a single connection instance.
     *
     * @return ServiceAbstract
     */
    public function service()
    {
        return $this->service;
    }
}
